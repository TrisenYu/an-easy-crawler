# Let's try to DEPRECATE this.
from typing import Union

from crypto.unk_hash import netease_wmjsonp_guid
import time
from urllib import parse
import struct

var_da_watman = {
	"bc"          : {"c": 0, "a": "STRING", "e": 3},
	"Oa"          : {"c": 1, "a": "STRING", "e": 20},
	"Pa"          : {"c": 2, "a": "STRING", "e": 32},
	"Ma"          : {"c": 3, "a": "STRING", "e": 32},
	"Db"          : {"c": 4, "a": "STRING", "e": 32},
	"Ub"          : {"c": 5, "a": "NUMBER", "e": 4},
	"Lb"          : {"c": 6, "a": "NUMBER", "e": 1},
	"Zb"          : {"c": 7, "a": "STRING", "e": 32},
	"cb"          : {"c": 8, "a": "STRING", "e": 32},
	"Kb"          : {"c": 9, "a": "STRING", "e": 32},
	"ab"          : {"c": 10, "a": "STRING", "e": 128},
	"cc"          : {"c": 107, "a": "NUMBER", "e": 4},
	"_move"       : {"c": 109, "a": "ARRAY", "e": [2, 4, 1, 4, 4]},
	"_down"       : {"c": 110, "a": "ARRAY", "e": [2, 4, 1, 2, 4, 4]},
	"_up"         : {"c": 111, "a": "ARRAY", "e": [2, 4, 1, 4, 4]},
	"_click"      : {"c": 112, "a": "ARRAY", "e": [2, 4, 1, 4, 4, 20]},
	"_keydown"    : {"c": 113, "a": "ARRAY", "e": [2, 4, 1, 20]},
	"_focus"      : {"c": 114, "a": "ARRAY", "e": [2, 4, 1, 20]},
	"_blur"       : {"c": 115, "a": "ARRAY", "e": [2, 4, 1, 20]},
	"_scroll"     : {"c": 116, "a": "ARRAY", "e": [2, 4, 1, 4, 4]},
	"_orientation": {"c": 117, "a": "ARRAY", "e": [2, 4, 4, 4, 4, 1]},
	"_motion"     : {"c": 118, "a": "ARRAY", "e": [2, 4, 4, 4, 4, 2]},
	"_battery"    : {"c": 119, "a": "ARRAY", "e": [2, 4, 1, 1, 4]},
	"$b"          : {"c": 200, "a": "STRING", "e": 400},
	"zb"          : {"c": 201, "a": "STRING", "e": 20},
	"Ta"          : {"c": 202, "a": "NUMBER", "e": 1},
	"bb"          : {"c": 203, "a": "NUMBER", "e": 1},
	"Vb"          : {"c": 206, "a": "NUMBER", "e": 1},
	"Pb"          : {"c": 207, "a": "BOOLEAN", "e": 1},
	"Cb"          : {"c": 208, "a": "BOOLEAN", "e": 1},
	"tb"          : {"c": 209, "a": "BOOLEAN", "e": 1},
	"Ea"          : {"c": 210, "a": "BOOLEAN", "e": 1},
	"Fb"          : {"c": 211, "a": "BOOLEAN", "e": 1},
	"Va"          : {"c": 212, "a": "STRING", "e": 10},
	"Ib"          : {"c": 213, "a": "STRING", "e": 10},
	"eb"          : {"c": 214, "a": "STRING", "e": 15},
	"Jb"          : {"c": 215, "a": "HEX", "e": 16},
	"Qa"          : {"c": 216, "a": "HEX", "e": 16},
	"dc"          : {"c": 217, "a": "HEX", "e": 16},
	"Da"          : {"c": 218, "a": "BOOLEAN", "e": 1},
	"pb"          : {"c": 221, "a": "BOOLEAN", "e": 1},
	"ob"          : {"c": 222, "a": "BOOLEAN", "e": 1},
	"Yb"          : {"c": 223, "a": "BOOLEAN", "e": 1},
	"Mb"          : {"c": 225, "a": "NUMBER", "e": 1},
	"Ua"          : {"c": 228, "a": "BOOLEAN", "e": 1},
	"xb"          : {"c": 229, "a": "BOOLEAN", "e": 1},
	"Fa"          : {"c": 230, "a": "STRING", "e": 20},
	"Ga"          : {"c": 231, "a": "STRING", "e": 10},
	"Ha"          : {"c": 232, "a": "STRING", "e": 20},
	"Ia"          : {"c": 233, "a": "STRING", "e": 150},
	"Ab"          : {"c": 234, "a": "STRING", "e": 10},
	"Sb"          : {"c": 235, "a": "STRING", "e": 10},
	"ac"          : {"c": 236, "a": "STRING", "e": 10},
	"Na"          : {"c": 237, "a": "STRING", "e": 10},
	"Gb"          : {"c": 238, "a": "STRING", "e": 40},
	"fb"          : {"c": 239, "a": "STRING", "e": 20},
	"jb"          : {"c": 240, "a": "HEX", "e": 16},
	"ib"          : {"c": 241, "a": "NUMBER", "e": 2},
	"Nb"          : {"c": 242, "a": "ARRAY", "e": [2, 2, 2, 2]},
	"mb"          : {"c": 243, "a": "NUMBER", "e": 1},
	"nb"          : {"c": 401, "a": "BOOLEAN", "e": 1},
	"hb"          : {"c": 402, "a": "STRING", "e": 10},
	"Eb"          : {"c": 403, "a": "NUMBER", "e": 1},
	"gb"          : {"c": 404, "a": "NUMBER", "e": 1},
	"Qb"          : {"c": 405, "a": "BOOLEAN", "e": 1},
	"Xb"          : {"c": 450, "a": "NUMBER", "e": 1},
	"wb"          : {"c": 451, "a": "BOOLEAN", "e": 1},
	"sb"          : {"c": 701, "a": "NUMBER", "e": 1},
	"kb"          : {"c": 702, "a": "NUMBER", "e": 1},
	"vb"          : {"c": 703, "a": "NUMBER", "e": 1},
	"Ob"          : {"c": 704, "a": "NUMBER", "e": 5},
	"qb"          : {"c": 705, "a": "NUMBER", "e": 1},
	"Wb"          : {"c": 706, "a": "STRING", "e": 10},
	"yb"          : {"c": 707, "a": "STRING", "e": 16},
	"Tb"          : {"c": 708, "a": "NUMBER", "e": 2},
	"rb"          : {"c": 709, "a": "NUMBER", "e": 2},
	"ub"          : {"c": 710, "a": "NUMBER", "e": 2},
	"lb"          : {"c": 711, "a": "ARRAY", "e": [3, 3, 3, 3, 3]},
	"Hb"          : {"c": 712, "a": "ARRAY", "e": [1, 3, 3]},
	"Sa"          : {"c": 713, "a": "ARRAY", "e": [4, 4]},
	"Wa"          : {"c": 800, "a": "STRING", "e": 8},
	"Xa"          : {"c": 801, "a": "STRING", "e": 8},
	"Ya"          : {"c": 802, "a": "STRING", "e": 8},
	"Za"          : {"c": 803, "a": "STRING", "e": 8},
	"$a"          : {"c": 804, "a": "STRING", "e": 8},
	"La"          : {"c": 327, "a": "STRING", "e": 32}
}

var_ha = {
    "nb": True,
    "hb": "",
    "Eb": 0,
    "gb": 0,
    "Xb": 7,
    "wb": True,
    "sb": 3,
    "kb": 0,
    "vb": 1,
    "Ob": 31,
    "qb": 2,
    "Wb": "网易云音乐",
    "yb": "",
    "Tb": 114552,
    "rb": 125535,
    "ub": 689124,
    "lb": [0, 76882, 1178164, 0, 0],
    "Hb": [0, 85, 188],
    "Sa": [1536, 747],
    "Qb": 1,
	"cc": ""
}
# 意思是没有传完。
var_tmp_cb = {
    "nb": True,
    "hb": "",
    "Eb": 0,
    "gb": 0,
    "Xb": 7,
    "wb": True
}

"""
var xa_res_da = [
	[1,-111,0,1,1],[1,-110,0,0],[1,-109,0,1,0],[1,-108,0,1,0],[1,-62,0,1,7],[1,-61,0,1,1],
	[2,-67,0,1,3],[2,-66,0,1,0],[2,-65,0,1,1],[2,-64,0,4,0,0,0,31],[2,-63,0,1,2],
	[2,-62,0,15,-25,-67,-111,-26,-104,-109,-28,-70,-111,-23,-97,-77,-28,-71,-112],
	[2,-61,0,0],[2,-60,0,2,-65,120],[2,-59,0,2,-22,95],[2,-58,0,2,-125,-28],
	[2,-57,0,15,0,0,0,1,44,82,17,-6,52,0,0,0,0,0,0],[2,-56,0,7,0,0,0,85,0,0,-68],
	[2,-55,0,8,0,0,6,0,0,0,2,-21],[1,-107,0,1,1],[0,107,0,4,0,0,0,0]
];
"""

# Xa(za(OfflineAudioCompletionEvent['renderedBuffer']['getChannelData'](0).slice(4500, 5000),
#       function(a, b) {return a + Math.abs(b)})
#    .toString()
# );
var_f = [-0.10808052122592926, -0.3909117579460144, -0.005692707374691963, 0.3892313539981842, 0.1189708411693573,
         -0.3545847237110138, -0.22215835750102997, 0.28990939259529114, 0.30651888251304626, -0.20068736374378204,
         -0.3649081289768219, 0.09447672218084335, 0.39241594076156616, 0.01972723752260208, -0.38671597838401794,
         -0.13228477537631989, 0.34825485944747925, 0.2336597591638565, -0.28028473258018494, -0.3152626156806946,
         0.18855544924736023, 0.37017616629600525, -0.08083496987819672, -0.39374271035194397, -0.03375764563679695,
         0.38395944237709045, 0.14551350474357605, -0.3416479527950287, -0.2449675053358078, 0.27038538455963135,
         0.3236900269985199, -0.17620299756526947, -0.3750091791152954, 0.06707345694303513, 0.39457112550735474,
         0.04776068031787872, -0.38071200251579285, -0.15857373178005219, 0.3345990777015686, 0.2559768855571747,
         -0.2601313292980194, -0.3317164480686188, 0.1636117845773697, 0.3793715238571167, -0.053204089403152466,
         -0.3947939872741699, -0.06169518083333969, 0.3767779767513275, 0.17133483290672302, -0.32686012983322144,
         -0.26643073558807373, 0.24927592277526855, 0.33893653750419617, -0.15060420334339142, -0.3827176094055176,
         0.0392051599919796, 0.3940754532814026, 0.07548341900110245, -0.3720568120479584, -0.18374982476234436,
         0.31853434443473816, 0.2764267921447754, -0.2380496710538864, -0.3456706702709198, 0.13742293417453766,
         0.38562333583831787, -0.02518303692340851, -0.39290815591812134, -0.08916562795639038, 0.36691567301750183,
         0.1959361582994461, -0.3098544776439667, -0.2860908508300781, 0.22656294703483582, 0.35199669003486633,
         -0.12410087138414383, -0.3880743384361267, 0.011147921904921532, 0.3912737965583801, 0.10272243618965149,
         -0.36133530735969543, -0.20786799490451813, 0.30080175399780273, 0.2953859269618988, -0.2148056924343109,
         -0.35786890983581543, 0.11063556373119354, 0.39003047347068787, 0.002884074579924345, -0.38915330171585083,
         -0.11613661795854568, 0.35531771183013916, 0.21953260898590088, -0.29139578342437744, -0.30431613326072693,
         0.20280584692955017, 0.36331161856651306, -0.09705545008182526, -0.39152640104293823, -0.01689741015434265,
         0.38657668232917786, 0.12940019369125366, -0.34888723492622375, -0.2309257686138153, 0.28165411949157715,
         0.3128774166107178, -0.1905776560306549, -0.36831775307655334, 0.08336950838565826, 0.392530620098114,
         0.030874738469719887, -0.3834940493106842, -0.14247596263885498, 0.34198224544525146, 0.2419815957546234,
         -0.271518737077713, -0.3209685981273651, 0.17807987332344055, 0.3727562725543976, -0.06957913190126419,
         -0.3929630219936371, -0.044789619743824005, 0.37988507747650146, 0.1553402692079544, -0.33463698625564575,
         -0.2527109980583191, 0.26105761528015137, 0.3286595642566681, -0.16538338363170624, -0.376757949590683,
         0.05572175234556198, 0.39293840527534485, 0.05863871052861214, -0.37583693861961365, -0.1680111289024353,
         0.3269074559211731, 0.2631351947784424, -0.2503001093864441, -0.33595624566078186, 0.15250661969184875,
         0.38031458854675293, -0.04181387275457382, -0.3924575746059418, -0.0724056139588356, 0.37135937809944153,
         0.18047724664211273, -0.3188117742538452, -0.27324944734573364, 0.23926767706871033, 0.3428669571876526,
         -0.1394694596529007, -0.3834362328052521, 0.027868907898664474, 0.3915252089500427, 0.08607758581638336,
         -0.366452157497406, -0.1927223652601242, 0.3103441894054413, 0.2830314636230469, -0.22795723378658295,
         -0.34935981035232544, 0.12627074122428894, 0.38609105348587036, -0.013900132849812508, -0.3901177942752838,
         -0.09963738173246384, 0.3611019551753998, 0.20472489297389984, -0.301503986120224, -0.29246318340301514,
         0.21637465059757233, 0.3554224967956543, -0.1129123792052269, -0.3881821036338806, -0.0000786015298217535,
         0.3880555331707001, 0.11300347745418549, -0.35507112741470337, -0.2163005769252777, 0.2920379340648651,
         0.3012315630912781, -0.20430774986743927, -0.36061346530914307, 0.09931911528110504, 0.38943251967430115,
         0.01403036992996931, -0.38526201248168945, -0.1261412501335144, 0.34846988320350647, 0.22752152383327484,
         -0.2821860909461975, -0.30959266424179077, 0.19203338027000427, 0.3654140830039978, -0.08565691858530045,
         -0.3902694880962372, -0.02793298289179802, 0.38206690549850464, 0.13911308348178864, -0.3415132462978363,
         -0.238473042845726, 0.2720535695552826, 0.31760215759277344, -0.17958033084869385, -0.3698596656322479,
         0.07194990664720535, 0.3908403217792511, 0.04179784655570984, -0.37871646881103516, -0.15202942490577698,
         0.33450794219970703, 0.2494053691625595, -0.26195284724235535, -0.325674444437027, 0.16719207167625427,
         0.37437087297439575, -0.058247342705726624, -0.3913639187812805, -0.055654127150774, 0.3752070963382721,
         0.16486608982086182, -0.32726219296455383, -0.26013419032096863, 0.2515837252140045, 0.33338668942451477,
         -0.15457715094089508, -0.378412127494812, 0.044454824179410934, 0.39139145612716675, 0.06945624947547913,
         -0.37121760845184326, -0.1775081753730774, 0.31959226727485657, 0.27054572105407715, -0.24088338017463684,
         -0.3406843841075897, 0.1417158842086792, 0.381791889667511, -0.030568081885576248, -0.39054572582244873,
         -0.08308717608451843, 0.36622872948646545, 0.1896253526210785, -0.3109230101108551, -0.28003406524658203,
         0.22933310270309448, 0.3466751277446747, -0.12837880849838257, -0.3839212656021118, 0.016620129346847534,
         0.3886380195617676, 0.09647675603628159, -0.3604465425014496, -0.20133623480796814, 0.30175304412841797,
         0.28908786177635193, -0.21754342317581177, -0.3523118793964386, 0.11496145278215408, 0.3856705129146576,
         -0.002700336743146181, -0.38635537028312683, -0.10972987860441208, 0.35432544350624084, 0.2128124088048935,
         -0.2923096716403961, -0.2978234589099884, 0.20557141304016113, 0.35761457681655884, -0.10148980468511581,
         -0.3871450126171112, -0.011185921728610992, 0.38388291001319885, 0.12290892004966736, -0.34810566902160645,
         -0.2242187261581421, 0.28284376859664917, 0.3065328001976013, -0.1936277151107788, -0.3628809452056885,
         0.08801230788230896, 0.3884905278682709, 0.02505309134721756, -0.38119351863861084, -0.13599468767642975,
         0.34160903096199036, 0.23541295528411865, -0.27309051156044006, -0.3148896098136902, 0.18144279718399048,
         0.36769163608551025, -0.07442839443683624, -0.389348566532135, -0.03888687863945961, 0.37802615761756897,
         0.14890643954277039, -0.3346843421459198, -0.24630989134311676, 0.26299527287483215, 0.3228488564491272,
         -0.16900455951690674, -0.37192338705062866, 0.060724012553691864, 0.3894774615764618, 0.05263066291809082,
         -0.3740442395210266, -0.16145968437194824, 0.3269498348236084, 0.25655463337898254, -0.2522003948688507,
         -0.32987189292907715, 0.15613766014575958, 0.3752184510231018, -0.04690813273191452, -0.38876938819885254,
         -0.06623712927103043, 0.3693947494029999, 0.17371465265750885, -0.3187519907951355, -0.2664305865764618,
         0.24114245176315308, 0.3365408778190613, -0.14315184950828552, -0.37812188267707825, 0.03308289870619774,
         0.387665331363678, 0.07973684370517731, -0.36437785625457764, -0.18575747311115265, 0.31024497747421265,
         0.2760026752948761, -0.22986258566379547, -0.34286144375801086, 0.13006360828876495, 0.3806881904602051,
         -0.019262930378317833, -0.3862673342227936, -0.09315286576747894, 0.3591306209564209, 0.19766433537006378,
         -0.3015804886817932, -0.28541985154151917, 0.21849563717842102, 0.34899070858955383, -0.1169150173664093,
         -0.38299494981765747, 0.0054451958276331425, 0.38455697894096375, 0.10647310316562653, -0.35354822874069214,
         -0.20935983955860138, 0.2925978899002075, 0.29450371861457825, -0.20687313377857208, -0.3546939194202423,
         0.10363446921110153, 0.38483667373657227, 0.008369469083845615, -0.382381409406662, -0.1196548119187355,
         0.3475392460823059, 0.22079351544380188, -0.2832653224468231, -0.3032228946685791, 0.19497686624526978,
         0.35986194014549255, -0.09019853919744492, -0.3859969973564148, -0.022152842953801155, 0.3794340193271637,
         0.13255919516086578, -0.34074848890304565, -0.2316756397485733, 0.27323591709136963, 0.3111219108104706,
         -0.18262454867362976, -0.3641812205314636, 0.07659929990768433, 0.3863757252693176, 0.035856686532497406,
         -0.3758428990840912, -0.14521853625774384, 0.3334910571575165, 0.24223066866397858, -0.26292088627815247,
         -0.318684458732605, 0.1701212078332901, 0.3681182563304901, -0.06295794993638992, -0.3863578736782074,
         -0.04948827996850014, 0.37187349796295166, 0.1576964408159256, -0.3259054720401764, -0.25250500440597534,
         0.2523578405380249, 0.3259236812591553, -0.1574992537498474, -0.37175649404525757, 0.0493013896048069,
         0.3861001133918762, 0.0630677342414856, -0.36773985624313354, -0.1700933873653412, 0.3182312548160553,
         0.26270779967308044, -0.2417701780796051, -0.3330689072608948, 0.1448310762643814, 0.3752160370349884,
         -0.03562839701771736, -0.38558095693588257, -0.07659103721380234, 0.3632858693599701, 0.18231913447380066,
         -0.3102201521396637, -0.27260327339172363, 0.2308795303106308, 0.339794397354126, -0.13198405504226685,
         -0.3782033622264862, 0.021911783143877983, 0.3845767080783844, 0.09001488983631134, -0.35837522149086,
         -0.19431428611278534, 0.3018193244934082, 0.28215357661247253, -0.21964411437511444, -0.34591954946517944,
         0.11888384073972702, 0.3803415894508362, -0.008158564567565918, -0.38253477215766907, -0.10315137356519699,
         0.3523441553115845, 0.2056276947259903, -0.2923549711704254, -0.29060468077659607, 0.20766867697238922,
         0.35090792179107666, -0.10547582060098648, -0.38145363330841064, -0.005563222803175449, 0.37968191504478455,
         0.11604084074497223, -0.3457687497138977, -0.2166098654270172, 0.282607764005661, 0.2987639307975769,
         -0.19556903839111328, -0.3555646538734436, 0.09203407168388367, 0.38222163915634155, 0.019219042733311653,
         -0.3764999508857727, -0.1287713199853897, 0.33890557289123535, 0.22734789550304413, -0.2726411819458008,
         -0.30667799711227417, 0.18341068923473358, 0.36009272933006287, -0.07862341403961182, -0.3830147981643677,
         -0.032845862209796906, 0.37349560856819153, 0.14155720174312592, -0.33233439922332764, -0.2382991909980774,
         0.26301196217536926, 0.3148758113384247, -0.17139382660388947, -0.3647940158843994, 0.06523745507001877,
         0.38382086157798767, 0.04646853357553482, -0.3703370988368988, -0.15426121652126312, 0.3254779279232025,
         0.24900977313518524, -0.2530379891395569, -0.32268354296684265, 0.15914583206176758, 0.36903828382492065,
         -0.05175353214144707, -0.3841404914855957, -0.060047365725040436, 0.36670419573783875, 0.16678400337696075,
         -0.3182004690170288, -0.25941577553749084, 0.242655411362648, 0.3298899829387665, -0.1465490311384201,
         -0.37237098813056946, 0.03812941908836365, 0.38329026103019714, 0.07341403514146805, -0.3617536127567291]

# 假如说后端不验证，那可以改用随机的 462 个数组。然而事实证明没那么简单
_var_fc, _08 = 0, lambda x: x & 0xFF


def _add_on() -> int:
	global _var_fc
	if _var_fc <= 255:
		_var_fc += 1
		return _var_fc - 1
	return 255


# 填入 ua，
var_ya = {
	"$b": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
	"zb": "zh-CN",
	"Ta": 24,
	"bb": 1.25,
	"Vb": 20,
	"Pb": True,
	"Cb": True,
	"tb": True,
	"Ea": False,
	"Fb": False,
	"Va": "",
	"Ib": "Win32",
	"eb": "unknown",
	"Jb": "b69f0e3afa15fb947efef61ec84603ce",  # pdf mmh3_x64_128
	"Qa": "cc228fb5ac6a41d08dbf55405bb3d6ae",  # canvas mmh3_x64_128
	"dc": "0ccb739b310c9cbecc8da88c7db0257d",  # 没找到，估计不会差到哪里去。还是拿来判断的指纹。
	"Da": False,
	"pb": True,
	"ob": False,
	"Yb": False,
	"Mb": 2,
	"Ua": True,
	"xb": False,
	"Fa": "Mozilla",
	"Ga": "",
	"Ha": "Netscape",  # 怎么 TM 网景都出来了
	"Ia": "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
	"Ab": ["zh-CN", "zh-TW", "zh", "th"],
	"Sb": "",
	"ac": "",
	"Na": "",
	"Gb": "",
	"fb": "CSS1Compat",
	"jb": "",
	"ib": "",
	"mb": 8,
	"Nb": [1536, 864, 1536, 834],  # 窗口参数
	"La": ''
}
var_m = {
	'bc': "200",
	'Lb': _add_on(),
	'Db': netease_wmjsonp_guid(),
	'Ub': int(time.time()),
	'Oa': '2.7.5_602a5ad7',  # 这个极大概率经常变。
	'Pa': 'undefine',  # var.state.options.ma
	'Ma': 'undefine',  # var.state.options.C
	'Zb': "",  # WM_TID 有关，现观察为默认 ''
	'ab': 'c',  # var.state.options.lc
	'cb': "",  # WM_DID 有关，现观察为默认 ''
	'Kb': "YD00000558929251",  # 产品号
	'Wa': "e13487eb",  # 逐字符数组 "e13487eb"
	'Ya': '20343de2',  # "2,0,3,4,3,d,e,2"　不知道是否一直如此
	'$a': '94342c3d'  # 这玩意算起来要命
}


# 基本以 随机 2 字节 对应值重整化后的数组 长度 作为 469 的构成。
# 然后送去 unkhash。


def get_type(a) -> str:
	if isinstance(a, int) or isinstance(a, float):
		return 'number'
	elif isinstance(a, str):
		return 'string'
	elif isinstance(a, bytes) or isinstance(a, bytearray) or isinstance(a, list):
		return 'array'
	elif isinstance(a, dict):
		return 'object'
	elif isinstance(a, bool):
		return 'boolean'
	elif a is None:
		return 'null'
	return 'undefined'


def _get_listint(a) -> list[int]:
	if isinstance(a, float):
		a = int(hex(struct.unpack('<Q', struct.pack('<d', a))[0]), 16)
	if isinstance(a, str):
		while len(a) < 4:
			a += '\x00'
		return [_08(ord(a[3])) << 24, _08(ord(a[2])) << 16, _08(ord(a[1])) << 8, _08(ord(a[0]))]
	f = lambda x, y: _08(x >> y)
	return [f(a, 24), f(a, 16), f(a, 8), f(a, 0)]


def _Aa(c: str) -> list[int]:
	if c is None or len(c) == 0:
		return []
	if isinstance(c, list):
		c = "".join(c)
	out, res = parse.quote(c), []
	l, lena = 0, len(out)
	while l < lena:
		if out[l] == '%':
			res.append(_08((ord(out[l]) << 4) + ord(out[l + 1])))
			l += 2
			continue
		res.append(_08(ord(out[l])))
		l += 1
	return res


def _Ib(c) -> list[int]:
	if c is None or len(c) == 0:
		return []
	lena, res = len(c), []
	if isinstance(c, bytes) or isinstance(c, bytearray):
		c = c.decode('iso-8859-1')
	for i in range(0, lena, 2):
		res.append(_08(ord(c[i + 1]) + (ord(c[i]) << 4)))
	return res


def _ga(c, lena: int) -> Union[str, list[int]]:
	choice = get_type(c)
	if choice == 'string':
		return c[0:min(len(c), lena)]
	if choice == 'array':
		if len(c) > lena:
			return c[:lena:-1][::-1]  # 倒过来取但保持顺序
	# else:
	return c


def init_payload(variable):
	# 拿走恒为 undefined 的 Xa 和 Za。
	ans = []
	for k, v in enumerate(variable):
		res = []
		k, v, choice = v, variable[v], var_da_watman[v]
		f = choice['a']
		lenp: Union[int, list[int]] = choice['e']
		if f == 'BOOLEAN':
			res = _ga(_get_listint(1 if v else 2), lenp)
		elif f == 'NUMBER':
			res = _ga(_get_listint(v), lenp)
		elif f == 'HEX':
			res = _ga(_Ib(v), lenp)
		elif f == 'STRING':
			res = _Aa(_ga(v, lenp))
		elif f == 'ARRAY':
			for idx, vv in enumerate(v):
				_type, lenv = get_type(vv), lenp[idx]
				if _type == 'number':
					res.append(_ga(v, lenv))
				elif _type == 'string':
					res.append(_Aa(_ga(v, lenv)))
		c = _ga(_get_listint(choice['c']), 2)
		e = _ga(_get_listint(len(res)), 2)
		for _c in c:
			ans.append(_c)
		for _e in e:
			ans.append(_e)
		for _r in res:
			ans.append(_r)
	return ans


if __name__ == "__main__":
	t = init_payload(var_m)
	print(len(t), t)

	t = init_payload(var_ya)
	print(len(t), t)
