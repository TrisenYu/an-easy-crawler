#! /usr/bin/env python3
# -*- coding: utf8 -*-
# (c) Author: <kisfg@hotmail.com in 2025>
# SPDX-LICENSE-IDENTIFIER: GPL2.0-ONLY
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, see <https://www.gnu.org/licenses/>.

import random
import copy

_f = lambda x: ''.join([x[random.randint(0, len(x) - 1)] for _ in range(3)])
_s_box_ka = [
	0xe7, 0x4f, 0xab, 0x9b, 0xbb, 0xbe, 0xe8, 0xa5, 0x44, 0x03, 0x40, 0x9d, 0x52, 0xda, 0xf9, 0xde,
	0x32, 0xcd, 0x6f, 0xb0, 0x0f, 0x14, 0x7e, 0x78, 0x1c, 0x2a, 0x8e, 0x73, 0xb5, 0x7a, 0xe2, 0x5f,
	0x63, 0x22, 0x45, 0x46, 0x50, 0x64, 0x13, 0x7c, 0xbd, 0xea, 0x3f, 0x6b, 0x5a, 0x0b, 0xb8, 0x97,
	0xc7, 0xe4, 0xed, 0x27, 0x3e, 0x37, 0xad, 0x58, 0x3a, 0x08, 0x79, 0xf5, 0xd3, 0x8a, 0x15, 0x35,
	0xd7, 0x68, 0x6a, 0xa0, 0x36, 0x16, 0xcc, 0xc5, 0x33, 0x4c, 0x11, 0xf6, 0x83, 0xd2, 0x76, 0x17,
	0xe0, 0xfe, 0x8c, 0xac, 0xe9, 0xd0, 0xba, 0xd5, 0xca, 0x2d, 0x69, 0x88, 0xdb, 0x5e, 0x18, 0x05,
	0x31, 0x7f, 0xfb, 0xcb, 0x71, 0x7d, 0xfa, 0xa4, 0x6c, 0xf7, 0xdd, 0xe6, 0x04, 0x42, 0xb6, 0xb4,
	0x6e, 0xaa, 0x2f, 0x62, 0x12, 0x02, 0x6d, 0xf0, 0x0c, 0x9f, 0x3c, 0xce, 0xd4, 0x80, 0xbc, 0x29,
	0xdc, 0x99, 0x1e, 0x34, 0x96, 0x59, 0x1d, 0x65, 0xae, 0x70, 0x20, 0x72, 0xdf, 0xa8, 0x24, 0x1b,
	0x8d, 0x89, 0x2b, 0x4d, 0xa1, 0x1a, 0x30, 0x74, 0xd9, 0x2e, 0x4b, 0xfd, 0x90, 0x3d, 0xef, 0x19,
	0xc1, 0x07, 0xc3, 0xcf, 0xe1, 0x5d, 0x25, 0x94, 0xd6, 0xc8, 0xd1, 0xa2, 0x7b, 0xb1, 0x92, 0x49,
	0x56, 0x98, 0x28, 0xb2, 0xe5, 0x2c, 0xf4, 0x54, 0x06, 0x8f, 0x75, 0x39, 0x8b, 0xa6, 0xc9, 0xf3,
	0xa3, 0x1f, 0xd8, 0x5c, 0x38, 0x66, 0xf2, 0x23, 0x77, 0x82, 0x01, 0x9e, 0x95, 0xc6, 0xee, 0x86,
	0xec, 0x93, 0x41, 0x00, 0xff, 0x5b, 0x55, 0xa7, 0x4e, 0x48, 0x51, 0x10, 0x60, 0x84, 0x9a, 0x0e,
	0x87, 0xc0, 0x0d, 0xc2, 0x81, 0xeb, 0xaf, 0x4a, 0x85, 0xc4, 0x21, 0x61, 0xb7, 0xf8, 0xe3, 0x9c,
	0x26, 0xfc, 0x91, 0xb9, 0xb3, 0x09, 0x53, 0xf1, 0xbf, 0x43, 0x57, 0x67, 0x47, 0xa9, 0x3b, 0x0a
]

_aux_arr = [
	# v0, v1, v2, v3 = -39, 56, -51, 7
	# for j in range(64):
	#   ...
	#   parr[i + j] = fet(parr[i + j] ^ v1 ^ v2 ^ v3 ^ p[j])
	#   v0, v1, v2, v3 = cadd(v0), csub(v1), cadd(v2), cadd(v3)
	#   ...
	#   print(v1 ^ v2 ^ v3)
	# exit(0)
	0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3,
	0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3,
	0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3,
	0xc2, 0xc1, 0xc0, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3
]


def nonsense_f(arr: list[int]):
	res = []
	for a in arr:
		res.append(_s_box_ka[(a >> 4 & 0xF) * 0x10 + (a & 0xF)])
	return res


def custom_encode(inp_list: list[int]):
	_key = "IUoKOfRm31Ck\e/EdVbz6XNHt5W+24P9i7Gc80xuFshSyYnDgZvljaABwrTQpJqM"

	def fn_g(i: int, lena: int = 0):
		if lena == 1:
			return f"{_key[inp_list[idx] >> 2 & 0x3F]}{_key[inp_list[idx] << 4 & 0x30]}LL"
		elif lena == 2:
			return f'{_key[inp_list[idx] >> 2 & 0x3F]}' \
			       f'{_key[(inp_list[idx] << 4 & 0x30) + (inp_list[idx + 1] >> 4 & 0x0F)]}' \
			       f'{_key[(inp_list[idx + 1] << 2 & 0x3C)]}L'
		return f'{_key[inp_list[i] >> 2 & 0x3F]}' \
		       f'{_key[(inp_list[i] << 4 & 0x30) + (inp_list[i + 1] >> 4 & 0x0F)]}' \
		       f'{_key[(inp_list[i + 1] << 2 & 0x3C) + (inp_list[i + 2] >> 6 & 0x03)]}' \
		       f'{_key[inp_list[i + 2] & 0x3F]}'

	res = ''
	jdx, remain = 0, len(inp_list) % 3
	for idx in range(0, len(inp_list), 3):
		res += fn_g(idx)
		jdx = idx
	if remain == 0:
		return res
	return res + fn_g(jdx, remain)


def crazy_xor(payload: str, assign: list[int] = None) -> str:
	"""
	:param payload: payload 带有 crc32 后缀的字典。
	:param assign: 4 个随机数
	:return: 编码后的 base64
	"""
	tt, ext_y = "14744d95383cd3075DA42C93cDaAe7465CFA5fC0B93B1", []

	if assign is None or len(assign) < 4:
		y = [random.randint(0, 255) for _ in range(4)]
	else:
		y = [assign[_] for _ in range(4)]

	fet = lambda x: (x & 0xFF)
	for _ in range(64):
		ext_y.append(fet(ord(tt[_ % 45])) ^ fet(y[_ & 0x3]))

	p, E = copy.deepcopy(ext_y), copy.deepcopy(ext_y)  # 强制六十四个

	lenp, _for_pad = len(payload), 60
	if lenp & 0x3F > 60:
		_for_pad = 124
	choice = _for_pad - (lenp & 0x3F)
	parr = [ord(_) for _ in payload]
	for _ in range(choice):
		parr.append(0)
	for _ in range(3, -1, -1):  # 大端序
		parr.append(fet(lenp >> (_ << 3)))
	if len(parr) & 0x3F != 0:
		raise ValueError('unable to pad in the multiples of 64')

	for i in range(0, len(parr), 64):
		v0 = -39
		for j in range(64):
			parr[i + j] = fet(parr[i + j] + v0) ^ _aux_arr[j] ^ p[j]
			parr[i + j] = fet(E[j] + parr[i + j]) ^ E[j]
			v0 = v0 + 1
		E = nonsense_f(nonsense_f(parr[i:i + 64]))
		for _ in E:
			y.append(_)
	del ext_y, parr, E
	return custom_encode(y)

